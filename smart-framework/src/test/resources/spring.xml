<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="org.smart4j.spring"/>

    <bean id="greetingProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="interfaces" value="org.smart4j.spring.Greeting"/>
        <property name="target" ref="greetingImpl"/>
        <property name="interceptorNames">
            <list>
                <value>greetingBeforeAdvice</value>
                <value>greetingAfterAdvice</value>
                <value>greetingAroundAdvice</value>
            </list>
        </property>
    </bean>

    <bean id="greetingThrowProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="interfaces" value="org.smart4j.spring.Greeting"/>
        <property name="target" ref="greetingThrowImpl"/>
        <property name="interceptorNames">
            <list>
                <value>greetingThrowAdvice</value>
            </list>
        </property>
    </bean>

    <bean id="greetingIntroProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="interfaces" value="org.smart4j.spring.Apology"/>
        <property name="target" ref="greetingImpl"/>
        <property name="interceptorNames">
            <list>
                <value>greetingIntroAdvice</value>
            </list>
        </property>
        <property name="proxyTargetClass" value="true"/>
    </bean>

    <!-- Advisor（切面）封装了 Advice（增强）与 Pointcut（切点） -->
    <!-- Pointcut（切点）就是一个基于表达式的拦截条件 -->
    <bean id="greetingAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        <property name="advice" ref="greetingAroundAdvice"/>
        <property name="pattern" value="org.smart4j.spring.GreetingImpl.good.*"/>
    </bean>

    <bean id="greetingProxyWithAdvisor" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="greetingImpl"/>
        <property name="interceptorNames" value="greetingAdvisor"/>
        <property name="proxyTargetClass" value="true"/>
    </bean>

    <!-- 只能匹配目标类，而不能进一步匹配其中指定的方法 -->
    <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="beanNames" value="*AutoImpl"/>
        <property name="interceptorNames" value="greetingAroundAdvice"/>
        <!-- 如果该类有接口，就代理接口（使用 JDK 动态代理）；如果没有接口，就代理类（使用 CGLib 动态代理） -->
        <!-- CGLib 创建代理的速度比较慢，但创建代理后运行的速度却非常快，而 JDK 动态代理正好相反 -->
        <property name="optimize" value="true"/>
    </bean>

    <!-- 扫描所有的切面类，并为其自动生成代理 -->
    <!--    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">-->
    <!--        <property name="optimize" value="true"/>-->
    <!--    </bean>-->

</beans>
